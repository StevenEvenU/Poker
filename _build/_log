### Starting build.
# Target: test.ml.depends, tags: { package(ounit2), debug, extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules test.ml > test.ml.depends
# Target: deck.mli.depends, tags: { package(ounit2), debug, extension:mli, file:deck.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules deck.mli > deck.mli.depends
# Target: deck.cmi, tags: { package(ounit2), byte, compile, debug, extension:mli, file:deck.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o deck.cmi deck.mli
# Target: test.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o test.cmo test.ml
# Target: deck.ml.depends, tags: { package(ounit2), debug, extension:ml, file:deck.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules deck.ml > deck.ml.depends
# Target: deck.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:deck.cmo, file:deck.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o deck.cmo deck.ml
# Target: test.byte, tags: { package(ounit2), byte, debug, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -g -package ounit2 deck.cmo test.cmo -o test.byte
# Compilation successful.
